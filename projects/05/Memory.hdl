// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // // Put your code here:
    // RAM16K(in=in, load=load, address=address[0..13], out=memoryBus);  // 0 to 16383 (16384 address or 14 bits)
    // Screen(in=in, load=load, address=address[0..12], out=screenBus);  // 16384 to 24575 (8192 addresses or 13 bit address)
    // Keyboard(out=keyboardBus); // 24576 (1 bit address)
    
    // Mux4Way16(a=memoryBus, b=memoryBus, c=screenBus, d=keyboardBus, sel=address[13..14], out=out);
    // // Mux16(a=, b=, sel=, out=);
    // // DMux8Way(sel=address)
    DMux(in=load, sel=address[14], a=ramLoad, b=ioLoad);
    // DMux4Way(sel=address[12..13],
    //  in=load,
    //  a=bank00load,
    //  b=bank01load,
    //  c=bank02load,
    //  d=bank03load
    // //  e=bank04load,
    // //  f=bank05load,
    // //  g=bank06load,
    // //  h=bank07load
    //  );
    Mux16(a=ramOut, b=ioOut, sel=address[14], out=out);
    Mux16(a=screenOut, b=keyboardOut, sel=address[13], out=ioOut);
    // Mux4Way16(sel=address[12..13],
    //  a=RAM00,
    //  b=RAM01,
    //  c=RAM02,
    //  d=RAM03,
    // //  e=RAM04,
    // //  f=RAM05,
    // //  g=RAM06,
    // //  h=RAM07,
    //  out=out
    //  );
    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);
    Screen(in=in, load=ioLoad, address=address[0..12], out=screenOut);
    Keyboard(out=keyboardOut);
}