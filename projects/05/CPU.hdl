// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15], out=isA); // if(instruction[15] == 0) then isA == 1;    
    Mux(b=instruction[5], sel=instruction[15], out=isCwA); // if C instruction = 1, then look at ins5 / if A connect nothing (0==off)
    Mux16(a=instruction, b=ALUout, sel=isCwA, out=inAReg); // if C is = 1 + A ref in instruction, use ALU output, otherwise get other from instruction

    Or(a=isA, b=isCwA, out=loadA); // load A if isA OR instruction[15] + w/instruction[5] passed throgh

    // JMP or Count (not both)
    ARegister(in=inAReg, load=loadA, out=outAreg, out[0..14]=addressM);  // send address out addressM and on to MUX (may be replaced by M)
  
    Mux(b=instruction[4], sel=instruction[15],out=loadD);                   // instruction[15] && dest==D
    DRegister(in=ALUout, load=loadD, out=regDout);
      

      // JMP or Count (not both)
    Mux16(a=outAreg, b=inM, sel=instruction[12], out=regAorM);            // look at "a" from comp inst, if instruction[12] == 1, swap A for M
      
    ALU(x=regDout,
        y=regAorM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=ALUout,
        out=outM,
        zr=zr,
        ng=ng
    );
        
    // Setup flags and PC
    
    Or(a=ng, b=zr, out=isNeg);
    Not(in=isNeg, out=isPos);
    
    And(a=instruction[15], b=instruction[3], out=writeM);  // write M if inst[15] and inst[3] (M) = 1 (on)
    

    // analyze jump v. table
    And(a=ng, b=instruction[2], out=JLT);  // if j1 = on, check if out < 0
    And(a=zr, b=instruction[1], out=JEQ);  // if j2 = on, check if out = 0 ()
    And(a=isPos, b=instruction[0], out=JGT);  // if j3 = on, check if out > 0 (isPos)

    // since we have already verified j1 to j3 with >=< out, we can can just OR the rest
    Or(a=JEQ, b=JLT, out=JLE); // if JEQ and JLT = 1, then JLE = 1 (same as j1=1,j2=1)
    Or(a=JLE, b=JGT, out=JMP); // if JLE = 1 and JGT = 1, then JMP = 1 (same as j1=1,j2=1,j3=1)

    // if this a C instruction, we can jump if JMP = 1
    And(a=instruction[15], b=JMP, out=doJMP);   // doJMP? if(instruction[15] && jump)
    
    // if we are Jumping, don't increase count
    Not(in=doJMP, out=inc);

    // JMP or Count (not both), and only send address 0-14 out pc interface
    PC(in=outAreg, inc=inc, load=doJMP, reset=reset, out[0..14]=pc);
}